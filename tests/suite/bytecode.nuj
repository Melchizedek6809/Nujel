[test/add #x0 [bytecode-op->int #$0]]
[test/add #x9 [bytecode-op->int #$9]]
[test/add #xF [bytecode-op->int #$F]]
[test/add #x10 [bytecode-op->int #$10]]
[test/add #xFF [bytecode-op->int #$FF]]
[test/add :argument-mismatch [try car [bytecode-op->int]]]
[test/add :argument-mismatch [try car [bytecode-op->int 12]]]
[test/add :bytecode-op [type-of #$10]]
[test/add :bytecode-op [type-of [int->bytecode-op 255]]]
[test/add "#{\n00\n09o 3856\nFF\n}" [str/write [arr->bytecode-arr #[#$0 #$9 #$F #$10 #$FF]]]]
[test/add :bytecode-array [type-of [arr->bytecode-arr #[#$0 #$9 #$F #$10 #$FF]]]]
[test/add #$0 [array/ref [bytecode-arr->arr [arr->bytecode-arr #[#$0 #$9 #$F #$10 #$FF]]] 0]]
[test/add 0    [bytecode-eval [arr->bytecode-arr #[#$2 #$0 #$1]]]]
[test/add 127  [bytecode-eval [arr->bytecode-arr #[#$2 #$7F #$1]]]]
[test/add -1   [bytecode-eval [arr->bytecode-arr #[#$2 #$FF #$1]]]]
[test/add -128 [bytecode-eval [arr->bytecode-arr #[#$2 #$80 #$1]]]]
[test/add 1    [bytecode-eval [arr->bytecode-arr #[#$1]] 1 2 3 4]]
[test/add 3    [bytecode-eval [arr->bytecode-arr #[#$3 #$1]] 1 2]]
[test/add 5    [bytecode-eval [assemble [$push/int 3] [$push/int 2] [$add/int] [$ret]]]]
[test/add 3    [bytecode-eval [assemble [$push/int 3] [$ret]]]]
[test/add 0    [bytecode-eval [assemble [$push/int 0] [$ret]]]]
[test/add -3   [bytecode-eval [assemble [$push/int -3] [$ret]]]]
[test/add -128 [bytecode-eval [assemble [$push/int -128] [$nop] [$ret]]]]
[test/add 127  [bytecode-eval [assemble [$push/int 127] [$ret]]]]
[test/add #t   [int? [val->index "asd"]]]
[test/add "asd" [index->val [val->index "asd"]]]
[test/add '[123 asd] [index->val [val->index '[123 asd]]]]
[test/add '[123 asd] [asmrun [$push/lval '[123 asd]] [$ret]]]
[test/add 'test [asmrun [$push/lval 'test] [$ret]]]
[test/add 2 [[asmrun [$push/lval [\ [a] [+ 1 a]]] [$ret]] 1]]
[test/add '[test list] [let [[code [assemble [$push/lval [list 'test 'list]] [$ret]]]]                   [bytecode-eval code]]]
[test/add '[test list] [let [[code [assemble [$push/lval [list 'test 'list]] [$ret]]]] [garbage-collect] [bytecode-eval code]]]
[test/add '[1 2 3] [asmrun [$push/int 1] [$push/int 2] [$push/int 3] [$make-list 3] [$ret]]]
[test/add '[1] [asmrun [$push/int 1][$make-list 1] [$ret]]]
[test/add '[] [asmrun [$make-list 0] [$ret]]]
[test/add 3 [asmrun [$push/lval '[+ 1 2]] [$eval] [$ret]]]
[test/add 5 [asmrun [$push/int 2] [$push/int 3] [$apply 2 add/int] [$ret]]]
[test/add 4 [asmrun [$push/int 2] [$dup] [$apply 2 add/int] [$ret]]]
[test/add 26 [asmrun [$nop] [$push/int 26] [$jmp :asd] [$push/int 99] [list :label :asd] [$ret]]]
[test/add 26 [asmrun [$nop] [$push/int 26] [$push/lval #t] [$jt :asd] [$push/int 99] [list :label :asd] [$ret]]]
[test/add 99 [asmrun [$nop] [$push/int 26] [$push/lval #f] [$jt :asd] [$push/int 99] [list :label :asd] [$ret]]]
[test/add "#$0" [str/write [int->bytecode-op 0]]]
[test/add "#$9" [str/write [int->bytecode-op 9]]]
[test/add "#$F" [str/write [int->bytecode-op 15]]]
[test/add "#$10" [str/write [int->bytecode-op 16]]]
[test/add "#$FF" [str/write [int->bytecode-op 255]]]
[test/add :invalid-bc-op [try car [int->bytecode-op -129]]]
[test/add :invalid-bc-op [try car [int->bytecode-op 256]]]
[test/add "#$0" [str/write #$]]
[test/add "#$9" [str/write #$9]]
[test/add "#$F" [str/write #$F]]
[test/add "#$10" [str/write #$10]]
[test/add "#$FF" [str/write #$FF]]
[test/add :invalid-literal [try car [read/single "#$1FF"]]]
[test/add #t [int? [sym->index 'asd]]]
[test/add 'asd [index->sym [sym->index 'asd]]]
[test/add 5 [[asmrun [$lambda 'test-add '[a b] "Add a and b together" '[+ a b]] [$ret]] 2 3]]
[test/add 13 [byterun '[+ 6 7]]]
[test/add 15 [byterun '[+ 3 [+ 6 [- 7 1]]]]]
[test/add 55 [+ 1 [+ 2 [+ 3 [+ 4 [+ 5 [+ 6 [+ 7 [+ 8 [+ 9 10]]]]]]]]]]
[test/add 55 [byterun '[+ 1 [+ 2 [+ 3 [+ 4 [+ 5 [+ 6 [+ 7 [+ 8 [+ 9 10]]]]]]]]]]]
[test/add "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz" [byterun '[cat "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"]]]
[test/add 6 [byterun '[- 7 1]]]
[test/add 1 [byterun '[if #t 1 2]]]
[test/add 2 [byterun '[if #f 1 2]]]
[test/add 1000 [byterun '[do 1000]]]
[test/add "3.14159" [str/write [byterun '[do Ï€]]]]
[test/add "3.14159" [str/write [asmrun [$get 'Ï€] [$ret]]]]
[test/add 2 [asmrun [$push/int 1] [$def 'tmp] [$let] [$push/int 2] [$def 'tmp] [$get 'tmp] [$ret]]]
[test/add 1 [asmrun [$push/int 1] [$def 'tmp] [$let] [$push/int 2] [$def 'tmp] [$closure/pop] [$get 'tmp] [$ret]]]
[test/add 3 [[asmrun [$push/int 1] [$def 'tmp] [$let] [$push/int 3] [$def 'tmp] [$lambda 'two '[] "" '[do tmp]] [$closure/pop] [$ret]]]]
[test/add :asd [try [\ [a] [car a]] [asmrun [$push/lval '[:asd "Test"]] [$throw]]]]
[test/add :asd [car [asmrun [$jmp :start] [list :label :handle] [$ret] [list :label :start] [$try :handle] [$let] [$push/lval '[:asd "Test"]] [$throw]]]]
[test/add "Test" [cadr [asmrun [$jmp :start] [list :label :handle] [$ret] [list :label :start] [$try :handle] [$let] [$push/lval '[:asd "Test"]] [$throw]]]]
[test/add '[:asd "Test"] [try [\ [a] :shouldnt-have-caught-that] [asmrun [$jmp :start] [list :label :handle] [$ret] [list :label :start] [$try :handle] [$let] [$push/lval '[:asd "Test"]] [$throw]]]]
[test/add :asd [car [asmrun [$nop] [$nop] [$try :handle] [$let] [$push/lval '[:asd "Test"]] [$throw] [$nop] [$push/lval :error] [list :label :handle] [$ret]]]]
[test/add 3 [asmrun [$jmp :start] [list :label :ret] [$push/int 3] [$ret] [list :label :start] [$push/int 2] [$jmp :ret] [$ret]]]
[test/add 5 [asmrun [$jmp :start] [list :label :func] [$push/int 2] [$add/int] [$ret] [list :label :start] [$push/int 3] [$call :func] [$ret]]]
[test/add 5 [asmrun [$jmp :start] [list :label :func] [$push/int 2] [$add/int] [$ret] [list :label :start] [$push/int 3] [$jmp :func]]]
[test/add 1 [byterun '[car [cons 1 2]]]]
[test/add '[1 . 2] [asmrun [$push/int 1] [$push/int 2] [$apply 2 cons] [$ret]]]
[test/add 1 [asmrun [$push/int 1] [$push/int 2] [$apply 2 cons] [$apply 1 car] [$ret]]]
[test/add 1 [bytecode-eval [apply assemble [list [$push/int 1] [$push/int 2] [$apply 2 cons] [$apply 1 car] [$ret]]]]]
[test/add 37 [asmrun [$push/int 12] [$push/int 25] [$push/lval +] [$apply/dynamic 2] [$ret]]]
[test/add 22 [byterun '[[resolve [str->sym "+"]] 10 12]]]
[test/add 22 [byterun '[[tree/ref @[:asd + :qwe -] :asd] 10 12]]]
[test/add 1 [byterun '[car '[1 2]]]]
[test/add 3 [bytecode-eval [arr->bytecode-arr [apply array/new [flatten [list [$push/int 1] [$push/int 2] [$add/int] [$ret]]]]]]]
[test/add 3 [bytecode-eval #{020102020301}]]
[test/add "#{\n02i 1\n02i 2\n03\n01\n}" [str/write #{020102020301}]]
[test/add "#{\n02i 1\n02i 2\n03\n01\n}" [str/write #{02i 1 02i 2 0301}]]
[test/add 3 [bytecode-eval #{02i 1 02i 2 0301}]]
[test/add 3 [bytecode-eval #{05v 1 05v 2 0301}]]
[test/add "#{\n05v 1\n05v 2\n03\n01\n}" [str/write #{05v 1 05v 2 0301}]]
[test/add 3 [let [[tmp 3]] [bytecode-eval #{10s tmp 01}]]]
[test/add #$99 [let [[tmp 3]] [bytecode-eval #{05v #$99 0Fs tmp 01}] tmp]]
[test/add "#{\n05v #$99\n0Fs tmp\n01\n}" [str/write #{05v #$99 0Fs tmp 01}]]
[test/add 'test [asmrun [$push/symbol 'test] [$ret]]]
[test/add #nil [asmrun [$push/nil] [$ret]]]
[test/add :invalid-bc-op [try car [asmrun [$push/lval #nil] [$ret]]]]
