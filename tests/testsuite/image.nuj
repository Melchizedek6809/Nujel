(-123 (image/deserialize (image/serialize -123)))
(123 (image/deserialize (image/serialize 123)))
(123.321 (image/deserialize (image/serialize 123.321)))
(#f (image/deserialize (image/serialize #f)))
(#t (image/deserialize (image/serialize #t)))
(" 0123" (buffer->string (image/deserialize (image/serialize #m2030313233))))
("asdq" (image/deserialize (image/serialize "asdq")))
("asdq" (image/deserialize (image/serialize "asdq")))
("asd" (image/deserialize (image/serialize "asd")))
(#x20 (ref (image/deserialize (image/serialize (:u8 #m2030))) 0))
(#x30 (ref (image/deserialize (image/serialize (:u8 #m2030))) 1))
("" (image/deserialize (image/serialize "")))
('(1 2 3) (image/deserialize (image/serialize '(1 2 3))))
('(1 "qwe" :asd) (image/deserialize (image/serialize '(1 "qwe" :asd))))
([1 2 3] (image/deserialize (image/serialize [1 2 3])))
([:a :a :a :a :a] (image/deserialize (image/serialize [:a :a :a :a :a])))
([1 "qwe" :asd] (image/deserialize (image/serialize [1 "qwe" :asd])))
([['(1 2 3)] "qwe" :asd] (image/deserialize (image/serialize [['(1 2 3)] "qwe" :asd])))
({:a 1 :b 2 :c 3} (image/deserialize (image/serialize {:a 1 :b 2 :c 3})))
(Int (image/deserialize (image/serialize Int)))
(nreverse (image/deserialize (image/serialize nreverse)))
(stdin* (image/deserialize (image/serialize stdin*)))
('("asd" . "asd") (image/deserialize (image/serialize (let ((t "asd")) (cons t t)))))
(8 (defn double (a) (* a 2)) (:parent! double #nil) ((image/deserialize (image/serialize double)) 4))
;(2 ((image/deserialize (image/serialize min)) 2 4))
;(let* (defn double (a) (* a 2)) (:parent! double #nil) (write (image/deserialize (image/serialize double))))
