[test/add "#m" [string/write [buffer/allocate 0]]]
[test/add "#m00" [string/write [buffer/allocate 1]]]
[test/add "#m0000" [string/write [buffer/allocate 2]]]
[test/add "#m000000" [string/write [buffer/allocate 3]]]
[test/add 0 [-> [buffer/allocate 0] buffer/length]]
[test/add 1 [-> [buffer/allocate 1] buffer/length]]
[test/add 2 [-> [buffer/allocate 2] buffer/length]]
[test/add 514 [buffer/length [string/write [buffer/allocate 256]]]]
[test/add 514 [buffer/length [string/write [-> [buffer/allocate 0] [buffer/length! 256]]]]]
[test/add #t [buffer/immutable? #m]]
[test/add #f [buffer/immutable? [buffer/allocate 0]]]
[test/add #f [= [buffer/allocate 0] [buffer/allocate 0]]]
[test/add #t [let [[b [buffer/allocate 0]]] [= b b]]]
[test/add #f [let [[b [buffer/allocate 0]]] [< b b]]]
[test/add #f [let [[b [buffer/allocate 0]]] [> b b]]]
[test/add #t [let [[b #m1234]] [= b b]]]
[test/add #f [buffer/immutable? [buffer/dup #m12]]]
[test/add #t [buffer/immutable? [buffer/dup #m12 #t]]]
[test/add #f [let [[b [buffer/allocate 0]]] [= b [buffer/dup b]]]]
[test/add #x12 [buffer/ref [buffer/u8* #m12] 0]]
[test/add #x34 [buffer/ref [buffer/u8* #m1234] 1]]
[test/add 255 [buffer/ref [buffer/u8* #mFF] 0]]
[test/add -1 [buffer/ref [buffer/s8* #mFF] 0]]
[test/add 127 [buffer/ref [buffer/s8* #m7F] 0]]
[test/add -128 [buffer/ref [buffer/s8* #m80] 0]]
[test/add :out-of-bounds [try car [buffer/ref [buffer/u8* #m12] 1]]]
[test/add :type-error [try car [buffer/ref [buffer/u8* #m12 #f] 0]]]
[test/add #x56 [-> [buffer/allocate 1] buffer/u8* [buffer/set! 0 #x56] [buffer/ref 0]]]
[test/add "#m00010203" [-> [buffer/allocate 4] buffer/u8* [buffer/set! 0 0] [buffer/set! 1 1] [buffer/set! 2 2] [buffer/set! 3 3] buffer-view->buffer string/write]]
[test/add #f [-> [buffer/allocate 1] buffer/u8* buffer/immutable?]]
[test/add 1000 [-> [buffer/allocate 2] buffer/u16* [buffer/set! 0 1000] [buffer/ref 0]]]
[test/add 64536 [-> [buffer/allocate 2] buffer/u16* [buffer/set! 0 -1000] [buffer/ref 0]]]
[test/add -1000 [-> [buffer/allocate 2] buffer/s16* [buffer/set! 0 -1000] [buffer/ref 0]]]
[test/add 1000 [-> [buffer/allocate 2] buffer/s16* [buffer/set! 0 1000] [buffer/ref 0]]]
[test/add 100000 [-> [buffer/allocate 4] buffer/s32* [buffer/set! 0 100000] [buffer/ref 0]]]
[test/add -100000 [-> [buffer/allocate 4] buffer/s32* [buffer/set! 0 -100000] [buffer/ref 0]]]
[test/add 100000 [-> [buffer/allocate 4] buffer/u32* [buffer/set! 0  100000] [buffer/ref 0]]]
[test/add 4294867296 [-> [buffer/allocate 4] buffer/u32* [buffer/set! 0 -100000] [buffer/ref 0]]]
[test/add 10000000000 [-> [buffer/allocate 8] buffer/s64* [buffer/set! 0 10000000000] [buffer/ref 0]]]
[test/add 1000.0 [-> [buffer/allocate 8] buffer/f32* [buffer/set! 0 1000] [buffer/ref 0]]]
[test/add 1000.5 [-> [buffer/allocate 8] buffer/f32* [buffer/set! 0 1000.5] [buffer/ref 0]]]
[test/add 1000.0 [-> [buffer/allocate 8] buffer/f64* [buffer/set! 0 1000] [buffer/ref 0]]]
[test/add 1000.5 [-> [buffer/allocate 8] buffer/f64* [buffer/set! 0 1000.5] [buffer/ref 0]]]
[test/add :out-of-bounds [try car [-> [buffer/allocate 8] buffer/s8* [buffer/ref 9]]]]
[test/add :out-of-bounds [try car [-> [buffer/allocate 8] buffer/u8* [buffer/ref 9]]]]
[test/add :out-of-bounds [try car [-> [buffer/allocate 8] buffer/u16* [buffer/ref 5]]]]
[test/add :out-of-bounds [try car [-> [buffer/allocate 8] buffer/s16* [buffer/ref 5]]]]
[test/add :out-of-bounds [try car [-> [buffer/allocate 8] buffer/s32* [buffer/ref 3]]]]
[test/add :out-of-bounds [try car [-> [buffer/allocate 8] buffer/f32* [buffer/ref 3]]]]
[test/add :out-of-bounds [try car [-> [buffer/allocate 8] buffer/f64* [buffer/ref 1]]]]
[test/add :out-of-bounds [try car [-> [buffer/allocate 8] buffer/s64* [buffer/ref 1]]]]
[test/add :out-of-bounds [try car [-> [buffer/allocate 15] buffer/s64* [buffer/ref 1]]]]
[test/add "#m" [string/write [string->buffer ""]]]
[test/add "#m2030313233" [string/write [string->buffer " 0123"]]]
[test/add "" [buffer->string #m]]
[test/add " 0123" [buffer->string #m2030313233]]
[test/add "0123" [buffer->string [buffer/copy [buffer/allocate 4] "0123" 0]]]
[test/add :out-of-bounds [try car [buffer->string [buffer/copy [buffer/allocate 4] "0123" 1]]]]
[test/add "1122" [buffer->string [buffer/copy [buffer/copy [buffer/allocate 4] "11" 0] "22" 2]]]
