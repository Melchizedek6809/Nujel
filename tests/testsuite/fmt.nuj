[test/add "asd" [fmt "asd"]]
[test/add "asd" [macroexpand '[fmt "asd"]]]
[test/add "123" [eval [macroexpand '[fmt "{}" 123]]]]
[test/add "asd qwe" [eval [macroexpand '[fmt "asd {}" "qwe"]]]]
[test/add "asd 123" [eval [macroexpand '[fmt "asd {}" 123]]]]
[test/add "asd 123 qwe" [eval [macroexpand '[fmt "asd {} qwe" 123]]]]
[test/add "asd a qwe a" [eval [macroexpand '[fmt "asd {0} qwe {0}" "a"]]]]
[test/add "asd a qwe b" [eval [macroexpand '[fmt "asd {0} qwe {1}" "a" "b"]]]]
[test/add "asd a qwe b" [eval [macroexpand '[fmt "asd {} qwe {}" "a" "b"]]]]
[test/add "asd a qwe b" [eval [macroexpand '[fmt "asd {0} qwe {}" "a" "b"]]]]
[test/add :format-error [try car [macroexpand '[fmt "asd {} qwe {1}" "a" "b"]]]]
[test/add "1 2 2" [eval [macroexpand '[fmt "{} {1} {}" 1 2]]]]
[test/add :format-error [try car [macroexpand '[fmt "{0} {0} {}" 1 2 3]]]]
[test/add "1 1 1" [eval [macroexpand '[fmt "{0} {0} {}" 1]]]]
[test/add "asd qwe" [eval [macroexpand '[fmt "asd {0}" "qwe"]]]]
[test/add :format-error [try car [eval [macroexpand '[fmt "asd {1}" "qwe"]]]]]
[test/add "Hello, World!" [eval [macroexpand '[let [[w "World"]] [fmt "Hello, {w}!"]]]]]
[test/add :type-error [try car [macroexpand '[fmt]]]]
[test/add 1 [buffer/length [eval [macroexpand '[fmt "{:}" "\n"]]]]]
[test/add 4 [buffer/length [eval [macroexpand '[fmt "{:?}" "\n"]]]]] ;
[test/add "   255" [eval [macroexpand '[fmt "{:6d}" 255]]]]
[test/add "     99.12" [eval [macroexpand '[fmt "{:10.2d}" 99.1234]]]]
[test/add " 99.12" [eval [macroexpand '[fmt "{:6.2d}" 99.1234]]]]
[test/add "ff" [eval [macroexpand '[fmt "{:x}" 255]]]]
[test/add "#xff" [eval [macroexpand '[fmt "{:x?}" 255]]]]
[test/add "#xFF" [eval [macroexpand '[fmt "{:X?}" 255]]]]
[test/add "1F" [eval [macroexpand '[fmt "{:X}" 31]]]]
[test/add "#d31" [eval [macroexpand '[fmt "{:d?}" 31]]]]
[test/add "31" [eval [macroexpand '[fmt "{:d}" 31]]]]
[test/add "37" [eval [macroexpand '[fmt "{:o}" 31]]]]
[test/add "#o37" [eval [macroexpand '[fmt "{:o?}" 31]]]]
[test/add "#b10011" [eval [macroexpand '[fmt "{:b?}" 19]]]]
[test/add "10011" [eval [macroexpand '[fmt "{:b}" 19]]]]
[test/add "   10011" [eval [macroexpand '[fmt "{:8b}" 19]]]]
[test/add "00010011" [eval [macroexpand '[fmt "{:08b}" 19]]]]
[test/add "#b010011" [eval [macroexpand '[fmt "{:08b?}" 19]]]]
[test/add "#b11" [eval [macroexpand '[fmt "{:04b?}" 19]]]]
[test/add "  13" [eval [macroexpand '[fmt "{:4x}" 19]]]]
[test/add "0013" [eval [macroexpand '[fmt "{:04x}" 19]]]]
[test/add "#x0013" [eval [macroexpand '[fmt "{:06x?}" 19]]]]
[test/add "#x  13" [eval [macroexpand '[fmt "{:6x?}" 19]]]]
[test/add "   asd" [eval [macroexpand '[fmt "{:6}" "asd"]]]]
[test/add "000asd" [eval [macroexpand '[fmt "{:06}" "asd"]]]]
[test/add "00012" [eval [macroexpand '[fmt "{:>05x}" #x12]]]]
[test/add "12   " [eval [macroexpand '[fmt "{:<5x}"  #x12]]]]
[test/add " 12  " [eval [macroexpand '[fmt "{:^5x}"  #x12]]]]
[test/add "   12" [eval [macroexpand '[fmt "{:>5x}"  #x12]]]]
[test/add "12000" [eval [macroexpand '[fmt "{:<05x}" #x12]]]]
[test/add :format-error [try car [macroexpand '[fmt "abc {{}}" "def"]]]]
[test/add :format-error [try car [macroexpand '[fmt "abc {" "def}"]]]]
[test/add :format-error [try car [macroexpand '[fmt "" "abc"]]]]
[test/add "a 0 b cd e 5" [eval [macroexpand '[let [[i 0]] [fmt "a {i} b {} e {}" [cat "c" "d"] [+ 2 3]]]]]]
[test/add "00620062" [fmt "{:08X}" [do [require :crypto/adler32] [crypto/adler32/hash "a"]]]] ; These can be left in to test the require form
[test/add "0F9D02BC" [fmt "{:08X}" [do [require :crypto/adler32] [crypto/adler32/hash "asdQWE123"]]]]
[test/add "796B110D" [fmt "{:08X}" [do [import [hash :as adler32] :crypto/adler32] [adler32 "DiesIstEinTestDerNujelAdler32Implementierung"]]]] ; These can be left in to test the import form
[test/add #t [= [cat System/OS " " System/Architecture " " 5] [fmt "{System/OS} {System/Architecture} {}" [if #t 5 0]]]]
