(:float-inf (try car (/ 3 0)))
(:test (try (fn (e) :test) (/ 3 0)))
(:test (try car (try (fn (e) :test) (/ 3 0))))
(:inner (try (fn (e) :outer) (try (fn (e) :inner) (throw :asd))))
(:outer (try (fn (e) :outer) (try (fn (e) :inner) 1) (throw :asd)))
(#t (try (fn (error) (string? (cadr error))) (/ 3 0)))
(:success (try (fn (error) (car error)) (throw '(:success)) :failure))
('(123) (try (fn (error) error) (throw 123) 0))
('(#t) (try (fn (error) error) (throw #t) #f))
("asd" (try (fn (error) (car error)) (throw '("asd")) #nil))
(:test-exception (try (fn (error) (car error)) (throw (list :test-exception "Testing the exception system")) #nil))
(#t (try (fn (error) (string? (cadr error))) (throw (list :test-exception "Testing the exception system")) #nil))
(:float-inf (try (fn (err) (car err)) (try (fn (err) (/ 3 0) err) (throw :test-exception))))
(:float-inf (try (fn (err) (car err)) (/ 3 0)))
(:float-inf (try (fn (err) (car err)) (try (fn (error) (/ 3 0) error) (throw :test-exception))))
(:float-inf (try (fn (err) (car err)) (/  1.0 0.0)))
(:float-nan (try (fn (err) (car err)) (/  0.0 0.0)))
(:float-inf (try (fn (err) (car err)) (/ -1.0 0.0)))
(:invalid-let-form (try (fn (err) (car err)) (macroexpand (let (1) 1))))
(:invalid-let-form (try car (macroexpand (let (() 1) 1))))
