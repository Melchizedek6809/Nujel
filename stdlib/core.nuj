;; Contains various little pieces that were implemented in nujel instead of
;; C because of various reasons]

[defun describe/thing [o]
       "Describe a specific value O"
       [def doc [closure o]]
       [cat [str/write [doc :arguments]] " - " [doc :documentation]]
]

[defun describe/string [a]
       "Descibe whatever value string A resolves to"
       [describe/thing [resolve [str->sym a]]]
]

[defun describe [fun] "Describe FUN, if there is documentation available"
       [if [string? fun]
           [describe/string fun]
           [describe/thing fun]]
]

[defun array/fill! [a v i]
        "Fills array a with value v"
        [cond [[>= [int i] [array/length a]] a]
              [#t [array/set! a [int i] v] [array/fill! a v [+ 1 i]]]
        ]
]

[defun lognand [...l]
        "Returns the Nand of its arguments"
        [lognot [apply logand ...l]]
]

[defun mem []
       "Return some pretty printed memory usage information"
       [def info [memory-info]]
       [cat [ansi-white  "Memory Info"] "\n"
            [ansi-green  "Values:   "] [getf info :value]   "\n"
            [ansi-blue   "Closures: "] [getf info :closure] "\n"
            [ansi-red    "Arrays:   "] [getf info :array]   "\n"
            [ansi-yellow "STrings:  "] [getf info :string]  "\n"
            [ansi-cyan   "NFunc:    "] [getf info :native-function] "\n"
            [ansi-purple "Vectors:  "] [getf info :vector] "\n"
            [ansi-pink   "Symbols:  "] [getf info :symbol] "\n"
            ansi-reset
       ]
]

[defun wrap-value [val min max] "Constrains VAL to be within MIN and MAX, wrapping it around"
        [+ min [% [- val min] [- max min]]]
]

[defun symbol-table [off len environment]
       "Return a list of LEN symbols defined in ENVIRONMENT starting at OFF"
       [when-not environment [set! environment root-closure]]
       [when-not off [set! off 0]]
       [when-not len [set! len 9999999]]
       [sublist [environment [symbol-table*]] off [+ off len] #nil]
]
