[do [def help [let* [do [def iter [λ* [l]
           ""
           [cond [[nil? l] #t]
                 [#t [do [display [describe [car l]]]
                    [newline]
                    [iter [cdr l]]]]]]]
       [λ* [i]
           "Describe 10 functions at offset 1"
           [do [def off [* [int i] 10]]
              [iter [map cat [symbol-table off 10]]]
              [display [cat "Help page " [int i] " of " [/ [symbol-count] 10]]]
              [newline]
              #t]]]]]
    [def file/compile [λ* [path no-write environment]
        "Compile a Nujel source file into optimized object code"
        [do [def source [read [file/read path]]]
           [def object-code [compile/forms [cons 'do source] environment]]
           [if no-write
              #nil
              [file/write [cat [path/without-extension path] ".no"] [str/write object-code]]]
           object-code]]]
    [def file/eval [λ* [path]
        "Evaluate a Nujel source file in the current context"
        [do [def source [cons 'do [read [file/read path]]]]
           [apply root-closure [cons [compile [cons 'do source]]]]]]]
    [def eval/forked [λ* [nujel-binary raw-expr]
        "Evaluate @EXPR in a separate process running NUJEL-BINARY"
        [do [def expr [cat "[print [str/write " [str/write raw-expr]]]
           [def tmp-path [file/temp expr]]
           [def command [cat nujel-binary " " tmp-path]]
           [def res [popen command]]
           [file/remove tmp-path]
           [cons [car res] [cdr res]]]]]
    [def test-context "Nujel Bootstrap"]][do [def ctx [current-closure]]
    [def display/error [let* [do [def wrap [λ* [i text]
           ""
           [cond [[eq? i 0] [ansi-red text]]
                 [[eq? i 1] [string text]]
                 [[eq? i 2] [ansi-yellow [str/write text]]]
                 [#t text]]]]
       [def iter [λ* [error i]
           ""
           [if error
              [cons [wrap i [car error]] [iter [cdr error] [+ 1 i]]]
              [cons "" #nil]]]]
       [λ* [error]
           "Display ERROR in a nice, human readable way"
           [display [join [iter error 0] "\r\n"]]]]]]
    [def repl/exception-handler [λ* [error]
        ""
        [display/error error]]]
    [def repl/history #nil]
    [def repl/prompt [λ* []
        "> "
        "> "]]
    [def repl/wasm [let* [λ* [line]
        "Evaluate LINE in the wasm context"
        [try repl/exception-handler [do [def raw [read line]]
           [def expr [cons 'do raw]]
           [def cexpr [cons [compile expr]]]
           [apply ctx cexpr]]]]]]
    [def repl/readline [λ* [ctx]
        ""
        [do [def line [readline [repl/prompt]]]
           [if [nil? line]
              [do [display "Bye!\r\n"]
                 [exit 0]]
              #nil]
           [readline/history/add line]
           [def raw [read line]]
           [def expr [cons 'do raw]]
           [def cexpr [cons [compile expr]]]
           [def result [apply ctx cexpr]]
           [set! repl/history [cons line repl/history]]
           [display [cat [if [nil? result]
              ""
              [str/write result]] "\n"]]]]]
    [def repl [λ* []
        ""
        [do [readline/history/load [readline/history/path]]
           [while #t [do [try repl/exception-handler [repl/readline ctx]]
              [readline/history/save [readline/history/path]]]]]]]
    [def repl/print-help [λ* []
        ""
        [do [println [cat [ansi-rainbow "Nujel"] " - A Lisp dialect for games.\n"]]
           [println [cat [ansi-green "Usage:"] " nujel [options] [command_string | file]\n"]]
           [println [cat [ansi-blue "n"] " - do not load any stdlib"]]
           [println [cat [ansi-blue "v"] " - be verbose"]]
           [println [cat [ansi-blue "r"] " - eval following file without compilation/expansion"]]
           [println [cat [ansi-blue "x"] " - Run the expression following this argument directly"]]]]]
    [def repl/run-forked* [λ* [expr]
        ""
        [do [def command [cat repl/executable-name " -x \"" [str/write expr] "\""]]
           [popen command]]]]
    [def repl/run-forked [μ* [expr] "" [cons 'repl/run-forked* [cons [list 'quote expr] #nil]]]]
    [def repl/executable-name "nujel"]
    [def repl/parse-args [let* [do [def eval-next #f]
       [def run-repl #t]
       [def parse-option [λ* [option]
           ""
           [cond [[eq? option "x"] [do [set! eval-next #t]
                    [set! run-repl #f]]]
                 [[eq? option "h"] [do [repl/print-help]
                    [set! run-repl #f]]]]]]
       [def parse-options [λ* [options]
           ""
           [for-each parse-option [split options ""]]]]
       [def parse-arg [λ* [arg]
           ""
           [cond [eval-next [do [apply root-closure [cons [compile [cons 'do [read arg]]]]]
                    [set! eval-next #f]]]
                 [[eq? [char-at arg 0] 45] [parse-options [substr arg 1]]]
                 [#t [do [file/eval arg]
                    [set! run-repl #f]]]]]]
       [def parse-args [λ* [args]
           ""
           [if args
              [do [parse-arg [car args]]
                 [parse-args [cdr args]]]
              run-repl]]]
       parse-args]]]
    [def repl/init [λ* [...args]
        ""
        [do [set! repl/executable-name [car ...args]]
           [if [repl/parse-args [cdr ...args]]
              [repl]
              #nil]]]]][if [eq? OS "Emscripten"]
    #nil
    [do [test/add* '[0 . ""] '[do [repl/run-forked 1]]]
       [test/add* '[123 . ""] '[do [repl/run-forked [exit 123]]]]
       [test/add* '[0 . "123"] '[do [repl/run-forked [display 123]]]]]]