[test/add 1 1]
[test/add 'asd 'asd]
[test/add :asd :asd]
[test/add 1 [if #t 1 2]]
[test/add 2 [if #f 1 2]]
[test/add 123 #d123]
[test/add 6 #b0110]
[test/add 10 #b1010]
[test/add 15 #b11_11]
[test/add 7 #b01,11]
[test/add 192 #b1100_0000]
[test/add 255 #xFF]
[test/add 255 #xFf]
[test/add 160 #xa0]
[test/add 31 #x1_F]
[test/add 30 #x1,E]
[test/add 50 #x32]
[test/add 256 #x100]
[test/add 0 #o]
[test/add 7 #o7]
[test/add 10 #o12]
[test/add 26 #o32]
[test/add 4294967295 #b11111111_11111111_11111111_11111111]
[test/add 4294967295 #xFFFFFFFF]
[test/add 2 [- [+ 1 #b10] 1]]
[test/add 8 [- [+ 1 #o10] 1]]
[test/add 16 [- [+ 1 #x10] 1]]
[test/add 32 [+ #x10#x10]]
[test/add 32 [+ #x10[+ 0#x10]]]
[test/add 0 [bit-and #xf0 #x0F]]
[test/add 255 [bit-or #xf0 #x0F]]
[test/add 255 [bit-or #xfF #xFF]]
[test/add 255 [bit-xor #xf0 #x0F]]
[test/add 240 [bit-xor #xff #x0F]]
[test/add '[3] [let [[test-string "3"]] [read test-string] [read test-string]]]
[test/add :read-error [try [fn [err] [car err]] [read "#b1111-0000"]]]
[test/add :read-error [try [fn [err] [car err]] [read "#x1-F"]]]
[test/add :read-error [try [fn [err] [car err]] [read "#o12378"]]]
[test/add :read-error [try [fn [err] [car err]] [read "#d1F"]]]
[test/add :read-error [try [fn [err] [car err]] [read "#qwe"]]]
[test/add :read-error [try [fn [err] [car err]] [read "\"\\z\""]]]
[test/add :read-error [try [fn [err] [car err]] [read "123kg"]]]
[test/add :read-error [try [fn [err] [car err]] [read "123.123m"]]]
[test/add :read-error [try [fn [err] [car err]] [read "123.123.123"]]]
;[test/add :read-error [try [fn [err] [car err]] [read "#xF.F"]]]
;[test/add :read-error [try [fn [err] [car err]] [read "#o7.7"]]]
;[test/add :read-error [try [fn [err] [car err]] [read "#b1.1"]]]
[test/add :read-error [try [fn [e] [car e]] [read "#inf"]]]
[test/add :read-error [try car [read/single "9999999999999999999"]]]
[test/add :read-error [try car [read/single "1000000000000000000"]]]
[test/add 999999999999999999 [read/single "999999999999999999"]]
[test/add 100000000000000000 [read/single "100000000000000000"]]
[test/add :read-error [try car [read "(. b)"]]]
[test/add :read-error [try car [read "(a .)"]]]
[test/add :read-error [try car [read "(#;a . b)"]]]
[test/add :read-error [try car [read "(a . #;b)"]]]
[test/add '[a b] [car [read "(a #;. b)"]]]
[test/add :read-error [try car [read "(#;x #;y . z)"]]]
[test/add :read-error [try car [read "(#; #;x #;y . z)"]]]
[test/add :read-error [try car [read "(#; #;x . z)"]]]
[test/add 123 [def i-assaultmegablaster 123] i-assaultmegablaster]
[test/add :dies-ist-ein-test-ob-lange-symbole-funktionieren :dies-ist-ein-test-ob-lange-symbole-funktionieren]
[test/add '[1] [read "#;[\"asd\"] 1"]]
[test/add '[1] [read "#;[asd] 1"]]
[test/add '[1] [read "#;[asd [123]] 1"]]
[test/add '[1 2] [read "1 #;[asd [123]] 2"]]
[test/add '[1] [read "1 #;[asd [123]]"]]
[test/add 5 [eval [cons 'do [read "(+ 1 #;(* 2 3) 4)"]]]]
[test/add '[x z] [eval [cons 'do [read "(list 'x #;'y 'z)"]]]]
[test/add 12 [eval [cons 'do [read "(* 3 4 #;(+ 1 2))"]]]]
[test/add 16 [eval [cons 'do [read "(#;sqrt abs -16)"]]]]
[test/add '[a . c] [eval [cons 'do [read "'(a . #;b c)"]]]]
[test/add '[a . b] [eval [cons 'do [read "'(a . b #;c)"]]]]
