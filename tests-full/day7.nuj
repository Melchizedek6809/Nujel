#!/usr/bin/env nujel

[def real-data [apply array/new [map int [split [file/read "tests-full/day7.input"] ","]]]]

[defun fancy/calc []
       [def ret [array/allocate 2000]]
       [def acc 0]
       [for [i 0 2000]
            [set! acc [+ acc i]]
	    [array/set! ret i acc]
       ]
       ret
]
[def fancy [fancy/calc]]

[defun calc/mm [data pred] [reduce [\ [a b] [if [pred b a] b a]] data [data 0]]]
[defun calc/min [data] [calc/mm data <]]
[defun calc/max [data] [calc/mm data >]]
[defun calc/fuel/simple [data pos] [reduce [\ [a b] [+ a [abs [- b pos]]]] data 0]]
[defun calc/fuel/complex [data pos] [reduce [\ [a b] [+ a [fancy [abs [- b pos]]]]] data 0]]
[defun calc/optimal [data calc/fuel]
       [def cmin [calc/min data]]
       [def cmax [calc/max data]]


       [def ret-pos cmin]
       [def ret-fuel [calc/fuel data cmin]]
       [for [i [+ 1 cmin] cmax]
	    [def new-fuel [calc/fuel data i]]
	    ;[println ["I: " i " fuel: " new-fuel]]
	    [when [< new-fuel ret-fuel]
		  [do [set! ret-pos i]
		      [set! ret-fuel new-fuel]]]
       ]
       @[:pos ret-pos :fuel ret-fuel]
]

[def result [calc/optimal real-data calc/fuel/simple]]
[when [!= [result :fuel] 355989]
      [throw [list :wrong-result "Wrong result" result]]]
[def result [calc/optimal real-data calc/fuel/complex]]
[when [!= [result :fuel] 102245489]
      [throw [list :wrong-result "Wrong result" result]]]

;[repl]
